// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String   // Hashed password
  name            String?
  xeroUserId      String?  @unique
  firstName       String?
  lastName        String?
  fullName        String?
  tenantId        String?
  tenantName      String?
  tenantType      String?
  xeroAccessToken String?  // Encrypted in production
  xeroRefreshToken String? // Encrypted in production
  tokenExpiresAt  DateTime?
  hasCompletedSetup Boolean @default(false)
  setupCompletedAt  DateTime?
  importPreferences String?  // JSON string
  lastLoginAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([email])
  @@index([xeroUserId])
}

model BankAccount {
  id                 String    @id @default(cuid())
  xeroAccountId      String    @unique
  name               String
  code               String?
  currencyCode       String?
  status             String?
  bankName           String?
  accountNumber      String?
  balance            Decimal @default(0)
  balanceLastUpdated DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  transactions       BankTransaction[]
  
  @@index([xeroAccountId])
}

model Contact {
  id                         String   @id @default(cuid())
  xeroContactId              String   @unique
  contactNumber              String?
  accountNumber              String?
  contactStatus              String?
  name                       String
  firstName                  String?
  lastName                   String?
  companyNumber              String?
  emailAddress               String?
  bankAccountDetails         String?
  taxNumber                  String?
  accountsReceivableTaxType  String?
  accountsPayableTaxType     String?
  isSupplier                 Boolean  @default(false)
  isCustomer                 Boolean  @default(false)
  defaultCurrency            String?
  updatedDateUTC             DateTime
  lastSyncedAt               DateTime @default(now())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  transactions               BankTransaction[]
  invoices                   Invoice[]
  
  @@index([xeroContactId])
  @@index([emailAddress])
  @@index([isSupplier])
  @@index([isCustomer])
}

model Invoice {
  id                    String    @id @default(cuid())
  xeroInvoiceId         String    @unique
  type                  String    // 'ACCREC' or 'ACCPAY'
  contactId             String
  date                  DateTime
  dueDate               DateTime?
  status                String    // 'DRAFT', 'AUTHORISED', 'PAID', etc
  lineAmountTypes       String?
  invoiceNumber         String?
  reference             String?
  brandingThemeId       String?
  url                   String?
  currencyCode          String?
  currencyRate          Decimal?
  subTotal              Decimal   @default(0)
  totalTax              Decimal   @default(0)
  total                 Decimal   @default(0)
  totalDiscount         Decimal?
  hasAttachments        Boolean   @default(false)
  isDiscounted          Boolean   @default(false)
  amountDue             Decimal   @default(0)
  amountPaid            Decimal   @default(0)
  fullyPaidOnDate       DateTime?
  amountCredited        Decimal   @default(0)
  updatedDateUTC        DateTime
  lastSyncedAt          DateTime  @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  contact               Contact   @relation(fields: [contactId], references: [xeroContactId])
  
  @@index([xeroInvoiceId])
  @@index([contactId])
  @@index([type])
  @@index([status])
  @@index([date])
  @@index([dueDate])
}

model BankTransaction {
  id                   String   @id @default(cuid())
  bankTransactionId    String?  @unique // Made optional for existing data
  xeroTransactionId    String?  @unique // Keep for backward compatibility
  type                 String   // 'SPEND' or 'RECEIVE'
  contactId            String?
  contactName          String?  // Keep for backward compatibility
  bankAccountId        String
  isReconciled         Boolean  @default(false)
  date                 DateTime
  reference            String?
  description          String?  // Keep for backward compatibility
  currencyCode         String?
  currencyRate         Decimal?
  amount               Decimal? // Keep for backward compatibility
  url                  String?
  status               String   // 'AUTHORISED', 'DELETED', etc
  lineAmountTypes      String?
  lineItems            String?  // Keep for backward compatibility
  subTotal             Decimal  @default(0)
  totalTax             Decimal  @default(0)
  total                Decimal  @default(0)
  prepaymentId         String?
  overpaymentId        String?
  updatedDateUTC       DateTime @default(now())
  hasAttachments       Boolean  @default(false)
  statusAttributeString String?
  accountCode          String?  // Keep for backward compatibility
  taxType              String?  // Keep for backward compatibility
  lastSyncedAt         DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  bankAccount          BankAccount @relation(fields: [bankAccountId], references: [id])
  contact              Contact?    @relation(fields: [contactId], references: [xeroContactId])
  
  @@index([bankTransactionId])
  @@index([xeroTransactionId])
  @@index([bankAccountId])
  @@index([contactId])
  @@index([date])
  @@index([isReconciled])
}

model SyncLog {
  id             String   @id @default(cuid())
  syncType       String   // 'bank_accounts', 'transactions'
  status         String   // 'success', 'failed', 'partial'
  startedAt      DateTime
  completedAt    DateTime?
  recordsCreated Int      @default(0)
  recordsUpdated Int      @default(0)
  errorMessage   String?
  details        String? // Store details as JSON string
  
  @@index([syncType, startedAt])
}

model GLAccount {
  id                    String   @id @default(cuid())
  code                  String   @unique
  name                  String
  type                  String   // 'EXPENSE', 'REVENUE', 'ASSET', 'LIABILITY', etc.
  status                String?  // 'ACTIVE', 'ARCHIVED'
  description           String?
  systemAccount         Boolean  @default(false)
  showInExpenseClaims   Boolean  @default(false)
  enablePaymentsToAccount Boolean @default(false)
  class                 String?  // 'ASSET', 'EQUITY', 'EXPENSE', 'LIABILITY', 'REVENUE'
  reportingCode         String?
  reportingCodeName     String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([code])
  @@index([type])
  @@index([status])
}

model StandardOperatingProcedure {
  id                    String   @id @default(cuid())
  year                  String   // '2024' or '2025'
  chartOfAccount        String   // e.g., '321 - Contract Salaries'
  pointOfInvoice        String?  // Only for 2025
  serviceType           String
  referenceTemplate     String
  referenceExample      String
  descriptionTemplate   String
  descriptionExample    String
  note                  String?
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@unique([year, chartOfAccount, serviceType])
  @@index([year, chartOfAccount])
  @@index([isActive])
}

// Cash Flow Models
model SyncedInvoice {
  id              String   @id // Xero InvoiceID
  contactId       String
  contactName     String?
  invoiceNumber   String?
  reference       String?
  dueDate         DateTime
  date            DateTime // Invoice date
  amountDue       Decimal
  total           Decimal
  type            String   // ACCREC or ACCPAY
  status          String   @default("OPEN") // OPEN, PAID, VOIDED
  lineAmountTypes String?
  currencyCode    String?
  lastModifiedUtc DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([status, dueDate])
  @@index([contactId])
  @@index([type])
}

model RepeatingTransaction {
  id                 String   @id // Xero RepeatingInvoiceID
  type               String   // ACCREC or ACCPAY
  contactId          String
  contactName        String?
  scheduleUnit       String   // WEEKLY, MONTHLY
  scheduleInterval   Int
  nextScheduledDate  DateTime?
  endDate            DateTime?
  amount             Decimal
  total              Decimal
  status             String
  reference          String?
  lastModifiedUtc    DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@index([nextScheduledDate])
  @@index([status])
  @@index([type])
}

model CashFlowBudget {
  id               String   @id @default(cuid())
  accountCode      String
  accountName      String
  category         String   // REVENUE, EXPENSE, TAX, etc
  monthYear        String   // Format: "2024-01"
  budgetedAmount   Decimal
  actualAmount     Decimal @default(0)
  variance         Decimal @default(0)
  notes            String?
  importedFrom     String?  // "xero_export" or "manual"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([accountCode, monthYear])
  @@index([monthYear])
  @@index([category])
}

model CashFlowForecast {
  id                String   @id @default(cuid())
  date              DateTime
  openingBalance    Decimal  
  // Inflows
  fromInvoices      Decimal @default(0)
  fromRepeating     Decimal @default(0)
  fromOther         Decimal @default(0)
  totalInflows      Decimal @default(0)
  // Outflows
  toBills           Decimal @default(0)
  toRepeating       Decimal @default(0)
  toTaxes           Decimal @default(0)
  toPatterns        Decimal @default(0)
  toBudgets         Decimal @default(0)
  totalOutflows     Decimal @default(0)
  closingBalance    Decimal
  // Scenarios
  bestCase          Decimal?
  worstCase         Decimal?
  // Metadata
  confidenceLevel   Decimal @default(0.8)
  alerts            String?  // JSON array of alerts
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([date])
  @@index([date])
}

model PaymentPattern {
  id                String   @id @default(cuid())
  contactId         String
  contactName       String
  type              String   // CUSTOMER or SUPPLIER
  averageDaysToPay  Decimal
  onTimeRate        Decimal // Percentage paid on time
  earlyRate         Decimal // Percentage paid early
  lateRate          Decimal // Percentage paid late
  sampleSize        Int      // Number of invoices analyzed
  lastCalculated    DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([contactId, type])
  @@index([contactId])
}

model TaxObligation {
  id               String   @id @default(cuid())
  type             String   // VAT, PAYE_NI, CORPORATION_TAX
  dueDate          DateTime
  amount           Float
  status           String   @default("PENDING") // PENDING, PAID
  periodStart      DateTime?
  periodEnd        DateTime?
  reference        String?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([dueDate])
  @@index([type])
  @@index([status])
}

model ErrorLog {
  id               String   @id @default(cuid())
  fingerprint      String
  errorName        String
  errorMessage     String
  errorStack       String?
  errorCode        String?
  severity         String   // low, medium, high, critical
  context          String   // JSON string for additional context data
  occurredAt       DateTime
  createdAt        DateTime @default(now())
  
  @@index([fingerprint])
  @@index([severity])
  @@index([occurredAt])
}

model CashFlowSyncLog {
  id             String   @id @default(cuid())
  syncType       String   // DELTA or FULL_RECONCILIATION
  entityType     String   // invoices, bills, repeating, etc
  startedAt      DateTime
  completedAt    DateTime?
  itemsSynced    Int      @default(0)
  itemsCreated   Int      @default(0)
  itemsUpdated   Int      @default(0)
  itemsDeleted   Int      @default(0)
  lastModifiedAfter DateTime? // For delta syncs
  status         String   @default("IN_PROGRESS") // IN_PROGRESS, SUCCESS, FAILED
  errorMessage   String?
  
  @@index([syncType, completedAt])
  @@index([entityType])
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  userEmail    String?
  action       String
  resource     String
  resourceId   String?
  metadata     String   @default("{}") // JSON string
  ipAddress    String?
  userAgent    String?
  status       String   // success or failure
  errorMessage String?
  duration     Int?     // in milliseconds
  timestamp    DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([resourceId])
  @@index([timestamp])
  @@index([status])
}

model CurrencyRate {
  id            String   @id @default(cuid())
  fromCurrency  String
  toCurrency    String
  rate          Decimal
  source        String   @default("xero") // 'xero', 'xe', 'manual'
  effectiveDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([fromCurrency, toCurrency, effectiveDate])
  @@index([effectiveDate])
  @@index([fromCurrency, toCurrency])
}

model Report {
  id           String   @id @default(cuid())
  userId       String
  type         String   // 'profit-loss', 'balance-sheet', 'cash-flow', 'tax-summary'
  format       String   // 'pdf', 'excel', 'csv'
  startDate    DateTime
  endDate      DateTime
  filePath     String
  fileSize     Int
  status       String   @default("pending") // 'pending', 'generating', 'completed', 'failed'
  generatedAt  DateTime?
  expiresAt    DateTime
  downloadCount Int     @default(0)
  lastDownloadAt DateTime?
  errorMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([expiresAt])
}
